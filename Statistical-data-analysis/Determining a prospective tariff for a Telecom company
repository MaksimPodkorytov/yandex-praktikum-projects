{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Определение перспективного тарифа для телеком компании"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Необходимо определить наиболее перспективный тарифный план для федерального оператора сотовой связи. Для этого нужно осуществить предварительный анализ тарифов на небольшой выборке клиентов. Для анализа предоставлены данные 500 пользователей, использующих трафные планы: «Смарт» и «Ультра». Нужно проанализировать поведение клиентов и сделать вывод — какой тариф экономически более эффективен для оператора сотовой связи."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Шаг 1. Откроем файл с данными и изучим общую информацию"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 259,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Импортируем необходимые библиотеки\n",
    "import pandas as pd\n",
    "from scipy import stats as st\n",
    "import seaborn as sns, numpy as np\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import math"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 260,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Сохраним датасеты в соответствующих переменных\n",
    "calls = pd.read_csv('/datasets/calls.csv')\n",
    "internet = pd.read_csv('/datasets/internet.csv')\n",
    "messages = pd.read_csv('/datasets/messages.csv')\n",
    "users = pd.read_csv('/datasets/users.csv')\n",
    "tariffs = pd.read_csv('/datasets/tariffs.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 261,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 202607 entries, 0 to 202606\n",
      "Data columns (total 4 columns):\n",
      "id           202607 non-null object\n",
      "call_date    202607 non-null object\n",
      "duration     202607 non-null float64\n",
      "user_id      202607 non-null int64\n",
      "dtypes: float64(1), int64(1), object(2)\n",
      "memory usage: 6.2+ MB\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "None"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "id           0\n",
       "call_date    0\n",
       "duration     0\n",
       "user_id      0\n",
       "dtype: int64"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>duration</th>\n",
       "      <th>user_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>count</td>\n",
       "      <td>202607.000000</td>\n",
       "      <td>202607.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>mean</td>\n",
       "      <td>6.755887</td>\n",
       "      <td>1253.940619</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>std</td>\n",
       "      <td>5.843365</td>\n",
       "      <td>144.722751</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>min</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1000.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>25%</td>\n",
       "      <td>1.300000</td>\n",
       "      <td>1126.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>50%</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>1260.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>75%</td>\n",
       "      <td>10.700000</td>\n",
       "      <td>1379.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>max</td>\n",
       "      <td>38.000000</td>\n",
       "      <td>1499.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            duration        user_id\n",
       "count  202607.000000  202607.000000\n",
       "mean        6.755887    1253.940619\n",
       "std         5.843365     144.722751\n",
       "min         0.000000    1000.000000\n",
       "25%         1.300000    1126.000000\n",
       "50%         6.000000    1260.000000\n",
       "75%        10.700000    1379.000000\n",
       "max        38.000000    1499.000000"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>call_date</th>\n",
       "      <th>duration</th>\n",
       "      <th>user_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>18586</td>\n",
       "      <td>1050_91</td>\n",
       "      <td>2018-07-18</td>\n",
       "      <td>0.04</td>\n",
       "      <td>1050</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>139900</td>\n",
       "      <td>1356_884</td>\n",
       "      <td>2018-05-05</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1356</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              id   call_date  duration  user_id\n",
       "18586    1050_91  2018-07-18      0.04     1050\n",
       "139900  1356_884  2018-05-05      0.00     1356"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 149396 entries, 0 to 149395\n",
      "Data columns (total 5 columns):\n",
      "Unnamed: 0      149396 non-null int64\n",
      "id              149396 non-null object\n",
      "mb_used         149396 non-null float64\n",
      "session_date    149396 non-null object\n",
      "user_id         149396 non-null int64\n",
      "dtypes: float64(1), int64(2), object(2)\n",
      "memory usage: 5.7+ MB\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "None"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "Unnamed: 0      0\n",
       "id              0\n",
       "mb_used         0\n",
       "session_date    0\n",
       "user_id         0\n",
       "dtype: int64"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>mb_used</th>\n",
       "      <th>user_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>count</td>\n",
       "      <td>149396.000000</td>\n",
       "      <td>149396.000000</td>\n",
       "      <td>149396.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>mean</td>\n",
       "      <td>74697.500000</td>\n",
       "      <td>370.192426</td>\n",
       "      <td>1252.099842</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>std</td>\n",
       "      <td>43127.054745</td>\n",
       "      <td>278.300951</td>\n",
       "      <td>144.050823</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>min</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1000.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>25%</td>\n",
       "      <td>37348.750000</td>\n",
       "      <td>138.187500</td>\n",
       "      <td>1130.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>50%</td>\n",
       "      <td>74697.500000</td>\n",
       "      <td>348.015000</td>\n",
       "      <td>1251.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>75%</td>\n",
       "      <td>112046.250000</td>\n",
       "      <td>559.552500</td>\n",
       "      <td>1380.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>max</td>\n",
       "      <td>149395.000000</td>\n",
       "      <td>1724.830000</td>\n",
       "      <td>1499.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Unnamed: 0        mb_used        user_id\n",
       "count  149396.000000  149396.000000  149396.000000\n",
       "mean    74697.500000     370.192426    1252.099842\n",
       "std     43127.054745     278.300951     144.050823\n",
       "min         0.000000       0.000000    1000.000000\n",
       "25%     37348.750000     138.187500    1130.000000\n",
       "50%     74697.500000     348.015000    1251.000000\n",
       "75%    112046.250000     559.552500    1380.000000\n",
       "max    149395.000000    1724.830000    1499.000000"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>id</th>\n",
       "      <th>mb_used</th>\n",
       "      <th>session_date</th>\n",
       "      <th>user_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>120538</td>\n",
       "      <td>120538</td>\n",
       "      <td>1407_70</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2018-10-29</td>\n",
       "      <td>1407</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>67087</td>\n",
       "      <td>67087</td>\n",
       "      <td>1227_684</td>\n",
       "      <td>30.88</td>\n",
       "      <td>2018-12-14</td>\n",
       "      <td>1227</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Unnamed: 0        id  mb_used session_date  user_id\n",
       "120538      120538   1407_70     0.00   2018-10-29     1407\n",
       "67087        67087  1227_684    30.88   2018-12-14     1227"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 123036 entries, 0 to 123035\n",
      "Data columns (total 3 columns):\n",
      "id              123036 non-null object\n",
      "message_date    123036 non-null object\n",
      "user_id         123036 non-null int64\n",
      "dtypes: int64(1), object(2)\n",
      "memory usage: 2.8+ MB\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "None"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "id              0\n",
       "message_date    0\n",
       "user_id         0\n",
       "dtype: int64"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>count</td>\n",
       "      <td>123036.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>mean</td>\n",
       "      <td>1256.989410</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>std</td>\n",
       "      <td>143.523967</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>min</td>\n",
       "      <td>1000.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>25%</td>\n",
       "      <td>1134.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>50%</td>\n",
       "      <td>1271.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>75%</td>\n",
       "      <td>1381.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>max</td>\n",
       "      <td>1499.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             user_id\n",
       "count  123036.000000\n",
       "mean     1256.989410\n",
       "std       143.523967\n",
       "min      1000.000000\n",
       "25%      1134.000000\n",
       "50%      1271.000000\n",
       "75%      1381.000000\n",
       "max      1499.000000"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>message_date</th>\n",
       "      <th>user_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>122490</td>\n",
       "      <td>1496_325</td>\n",
       "      <td>2018-03-04</td>\n",
       "      <td>1496</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>101680</td>\n",
       "      <td>1415_256</td>\n",
       "      <td>2018-07-25</td>\n",
       "      <td>1415</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              id message_date  user_id\n",
       "122490  1496_325   2018-03-04     1496\n",
       "101680  1415_256   2018-07-25     1415"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 500 entries, 0 to 499\n",
      "Data columns (total 8 columns):\n",
      "user_id       500 non-null int64\n",
      "age           500 non-null int64\n",
      "churn_date    38 non-null object\n",
      "city          500 non-null object\n",
      "first_name    500 non-null object\n",
      "last_name     500 non-null object\n",
      "reg_date      500 non-null object\n",
      "tariff        500 non-null object\n",
      "dtypes: int64(2), object(6)\n",
      "memory usage: 31.4+ KB\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "None"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "user_id         0\n",
       "age             0\n",
       "churn_date    462\n",
       "city            0\n",
       "first_name      0\n",
       "last_name       0\n",
       "reg_date        0\n",
       "tariff          0\n",
       "dtype: int64"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>age</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>count</td>\n",
       "      <td>500.000000</td>\n",
       "      <td>500.00000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>mean</td>\n",
       "      <td>1249.500000</td>\n",
       "      <td>46.58800</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>std</td>\n",
       "      <td>144.481833</td>\n",
       "      <td>16.66763</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>min</td>\n",
       "      <td>1000.000000</td>\n",
       "      <td>18.00000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>25%</td>\n",
       "      <td>1124.750000</td>\n",
       "      <td>32.00000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>50%</td>\n",
       "      <td>1249.500000</td>\n",
       "      <td>46.00000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>75%</td>\n",
       "      <td>1374.250000</td>\n",
       "      <td>62.00000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>max</td>\n",
       "      <td>1499.000000</td>\n",
       "      <td>75.00000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           user_id        age\n",
       "count   500.000000  500.00000\n",
       "mean   1249.500000   46.58800\n",
       "std     144.481833   16.66763\n",
       "min    1000.000000   18.00000\n",
       "25%    1124.750000   32.00000\n",
       "50%    1249.500000   46.00000\n",
       "75%    1374.250000   62.00000\n",
       "max    1499.000000   75.00000"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>age</th>\n",
       "      <th>churn_date</th>\n",
       "      <th>city</th>\n",
       "      <th>first_name</th>\n",
       "      <th>last_name</th>\n",
       "      <th>reg_date</th>\n",
       "      <th>tariff</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>194</td>\n",
       "      <td>1194</td>\n",
       "      <td>70</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Москва</td>\n",
       "      <td>Егор</td>\n",
       "      <td>Наумов</td>\n",
       "      <td>2018-12-03</td>\n",
       "      <td>smart</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>410</td>\n",
       "      <td>1410</td>\n",
       "      <td>25</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Нижний Тагил</td>\n",
       "      <td>Гарри</td>\n",
       "      <td>Ильин</td>\n",
       "      <td>2018-08-28</td>\n",
       "      <td>smart</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     user_id  age churn_date          city first_name last_name    reg_date  \\\n",
       "194     1194   70        NaN        Москва       Егор    Наумов  2018-12-03   \n",
       "410     1410   25        NaN  Нижний Тагил      Гарри     Ильин  2018-08-28   \n",
       "\n",
       "    tariff  \n",
       "194  smart  \n",
       "410  smart  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 2 entries, 0 to 1\n",
      "Data columns (total 8 columns):\n",
      "messages_included        2 non-null int64\n",
      "mb_per_month_included    2 non-null int64\n",
      "minutes_included         2 non-null int64\n",
      "rub_monthly_fee          2 non-null int64\n",
      "rub_per_gb               2 non-null int64\n",
      "rub_per_message          2 non-null int64\n",
      "rub_per_minute           2 non-null int64\n",
      "tariff_name              2 non-null object\n",
      "dtypes: int64(7), object(1)\n",
      "memory usage: 256.0+ bytes\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "None"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "messages_included        0\n",
       "mb_per_month_included    0\n",
       "minutes_included         0\n",
       "rub_monthly_fee          0\n",
       "rub_per_gb               0\n",
       "rub_per_message          0\n",
       "rub_per_minute           0\n",
       "tariff_name              0\n",
       "dtype: int64"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>messages_included</th>\n",
       "      <th>mb_per_month_included</th>\n",
       "      <th>minutes_included</th>\n",
       "      <th>rub_monthly_fee</th>\n",
       "      <th>rub_per_gb</th>\n",
       "      <th>rub_per_message</th>\n",
       "      <th>rub_per_minute</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>count</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>mean</td>\n",
       "      <td>525.000000</td>\n",
       "      <td>23040.000000</td>\n",
       "      <td>1750.000000</td>\n",
       "      <td>1250.000000</td>\n",
       "      <td>175.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>std</td>\n",
       "      <td>671.751442</td>\n",
       "      <td>10861.160159</td>\n",
       "      <td>1767.766953</td>\n",
       "      <td>989.949494</td>\n",
       "      <td>35.355339</td>\n",
       "      <td>1.414214</td>\n",
       "      <td>1.414214</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>min</td>\n",
       "      <td>50.000000</td>\n",
       "      <td>15360.000000</td>\n",
       "      <td>500.000000</td>\n",
       "      <td>550.000000</td>\n",
       "      <td>150.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>25%</td>\n",
       "      <td>287.500000</td>\n",
       "      <td>19200.000000</td>\n",
       "      <td>1125.000000</td>\n",
       "      <td>900.000000</td>\n",
       "      <td>162.500000</td>\n",
       "      <td>1.500000</td>\n",
       "      <td>1.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>50%</td>\n",
       "      <td>525.000000</td>\n",
       "      <td>23040.000000</td>\n",
       "      <td>1750.000000</td>\n",
       "      <td>1250.000000</td>\n",
       "      <td>175.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>75%</td>\n",
       "      <td>762.500000</td>\n",
       "      <td>26880.000000</td>\n",
       "      <td>2375.000000</td>\n",
       "      <td>1600.000000</td>\n",
       "      <td>187.500000</td>\n",
       "      <td>2.500000</td>\n",
       "      <td>2.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>max</td>\n",
       "      <td>1000.000000</td>\n",
       "      <td>30720.000000</td>\n",
       "      <td>3000.000000</td>\n",
       "      <td>1950.000000</td>\n",
       "      <td>200.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       messages_included  mb_per_month_included  minutes_included  \\\n",
       "count           2.000000               2.000000          2.000000   \n",
       "mean          525.000000           23040.000000       1750.000000   \n",
       "std           671.751442           10861.160159       1767.766953   \n",
       "min            50.000000           15360.000000        500.000000   \n",
       "25%           287.500000           19200.000000       1125.000000   \n",
       "50%           525.000000           23040.000000       1750.000000   \n",
       "75%           762.500000           26880.000000       2375.000000   \n",
       "max          1000.000000           30720.000000       3000.000000   \n",
       "\n",
       "       rub_monthly_fee  rub_per_gb  rub_per_message  rub_per_minute  \n",
       "count         2.000000    2.000000         2.000000        2.000000  \n",
       "mean       1250.000000  175.000000         2.000000        2.000000  \n",
       "std         989.949494   35.355339         1.414214        1.414214  \n",
       "min         550.000000  150.000000         1.000000        1.000000  \n",
       "25%         900.000000  162.500000         1.500000        1.500000  \n",
       "50%        1250.000000  175.000000         2.000000        2.000000  \n",
       "75%        1600.000000  187.500000         2.500000        2.500000  \n",
       "max        1950.000000  200.000000         3.000000        3.000000  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>messages_included</th>\n",
       "      <th>mb_per_month_included</th>\n",
       "      <th>minutes_included</th>\n",
       "      <th>rub_monthly_fee</th>\n",
       "      <th>rub_per_gb</th>\n",
       "      <th>rub_per_message</th>\n",
       "      <th>rub_per_minute</th>\n",
       "      <th>tariff_name</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>50</td>\n",
       "      <td>15360</td>\n",
       "      <td>500</td>\n",
       "      <td>550</td>\n",
       "      <td>200</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>smart</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>1000</td>\n",
       "      <td>30720</td>\n",
       "      <td>3000</td>\n",
       "      <td>1950</td>\n",
       "      <td>150</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>ultra</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   messages_included  mb_per_month_included  minutes_included  \\\n",
       "0                 50                  15360               500   \n",
       "1               1000                  30720              3000   \n",
       "\n",
       "   rub_monthly_fee  rub_per_gb  rub_per_message  rub_per_minute tariff_name  \n",
       "0              550         200                3               3       smart  \n",
       "1             1950         150                1               1       ultra  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Напишем цикл применяющий к датасетам методы необходимые для изучения данных\n",
    "files = [calls, internet, messages, users, tariffs]\n",
    "for data in files:\n",
    "    display (data.info(),\n",
    "             data.isna().sum(),\n",
    "             data.describe(),\n",
    "             data.sample(2)\n",
    "            )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Вывод"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Изучив имеющиеся данные можно сделать следующие выводы:\n",
    "\n",
    "- В столбце churn_date обнаружено 462 пропущенных значения, пропуски в столбце означают что тариф на момент выгрузки данных действует, для прощения работы с данными этого столбца заполним пропуски нулевыми числовыми значениями.\n",
    "\n",
    "- В столбце duration обнаружено значительное число нулевых значений, нули в таком количестве в столбце содержащем данные о продолжительности звонка, могут означать пропущенные, неотвеченные звонки. В таком случае целесообразнее оставить их в таком виде без изменений, так как любая замена или исключение столь значаительного массива данных неизбежно скажется на точности осуществляемого исследования.\n",
    "\n",
    "- В столбце mb_used данные приведены в единица измерения - мегабайтах, а в столбце rub_per_gb - единицы измерения гигабавйты. При осуществлении дальнейшего исследования потребуется сопоставления этих двух велечин, поэтому необходимо приведение их к одной еденинце измерения. Для того чтобы, обеспечить необходимую точность расчетов приведем к наменьшей велечине к мегоабайтам, в вычислительной технике один гигабайт равен 1024 Мб, а в теории передачи информации 1000 Мб, соответственно  в нашем случае поделим значения столбца rub_per_gb на 1000.\n",
    "\n",
    "- Столбцы duration, mb_used имеют тип данных float64, для упрощения работы с данными изменим тип данных на int.\n",
    "\n",
    "- Тип данных в столбцах call_date, session_date, message_date - non-null object, так как столбцы включают в себя информацию о датах для дальнейшей работы с ними изменим типа данных в них на datetime64\n",
    "\n",
    "- Столбцы tariff датафрейма users и tariff_name датафрейма tariffs обладая идентичной информацией, имеют различные названия, что может помешать дальнейшему объединению датафреймов, поэтому переименуем столбец tariff_name в tariff\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Шаг 2. Подготовим данные"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Подготовим данные датафрейма calls"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 262,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>age</th>\n",
       "      <th>churn_date</th>\n",
       "      <th>city</th>\n",
       "      <th>first_name</th>\n",
       "      <th>last_name</th>\n",
       "      <th>reg_date</th>\n",
       "      <th>tariff</th>\n",
       "      <th>id</th>\n",
       "      <th>call_date</th>\n",
       "      <th>duration</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1000</td>\n",
       "      <td>52</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Краснодар</td>\n",
       "      <td>Рафаил</td>\n",
       "      <td>Верещагин</td>\n",
       "      <td>2018-05-25</td>\n",
       "      <td>ultra</td>\n",
       "      <td>1000_0</td>\n",
       "      <td>2018-07-25</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1000</td>\n",
       "      <td>52</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Краснодар</td>\n",
       "      <td>Рафаил</td>\n",
       "      <td>Верещагин</td>\n",
       "      <td>2018-05-25</td>\n",
       "      <td>ultra</td>\n",
       "      <td>1000_1</td>\n",
       "      <td>2018-08-17</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1000</td>\n",
       "      <td>52</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Краснодар</td>\n",
       "      <td>Рафаил</td>\n",
       "      <td>Верещагин</td>\n",
       "      <td>2018-05-25</td>\n",
       "      <td>ultra</td>\n",
       "      <td>1000_2</td>\n",
       "      <td>2018-06-11</td>\n",
       "      <td>2.85</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1000</td>\n",
       "      <td>52</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Краснодар</td>\n",
       "      <td>Рафаил</td>\n",
       "      <td>Верещагин</td>\n",
       "      <td>2018-05-25</td>\n",
       "      <td>ultra</td>\n",
       "      <td>1000_3</td>\n",
       "      <td>2018-09-21</td>\n",
       "      <td>13.80</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1000</td>\n",
       "      <td>52</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Краснодар</td>\n",
       "      <td>Рафаил</td>\n",
       "      <td>Верещагин</td>\n",
       "      <td>2018-05-25</td>\n",
       "      <td>ultra</td>\n",
       "      <td>1000_4</td>\n",
       "      <td>2018-12-15</td>\n",
       "      <td>5.18</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   user_id  age churn_date       city first_name  last_name    reg_date  \\\n",
       "0     1000   52        NaN  Краснодар     Рафаил  Верещагин  2018-05-25   \n",
       "0     1000   52        NaN  Краснодар     Рафаил  Верещагин  2018-05-25   \n",
       "0     1000   52        NaN  Краснодар     Рафаил  Верещагин  2018-05-25   \n",
       "0     1000   52        NaN  Краснодар     Рафаил  Верещагин  2018-05-25   \n",
       "0     1000   52        NaN  Краснодар     Рафаил  Верещагин  2018-05-25   \n",
       "\n",
       "  tariff      id   call_date  duration  \n",
       "0  ultra  1000_0  2018-07-25      0.00  \n",
       "0  ultra  1000_1  2018-08-17      0.00  \n",
       "0  ultra  1000_2  2018-06-11      2.85  \n",
       "0  ultra  1000_3  2018-09-21     13.80  \n",
       "0  ultra  1000_4  2018-12-15      5.18  "
      ]
     },
     "execution_count": 262,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Объединим датафреймы calls и users с помощью метода join, в качестве индекса для объединения зададим значения столбца user_id\n",
    "# Получившийся объединеный датафрейм сохраним под именем df_calls\n",
    "df_calls = users.join(calls.set_index('user_id'), how='left', on='user_id')\n",
    "df_calls.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 263,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Изменим тип данных в столбце call_date на datetime64\n",
    "df_calls['call_date'] = pd.to_datetime(df_calls['call_date'], format='%Y.%m.%dT%H:%M:%S')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 264,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Выделим из дат присутствующих в столбце call_date значения месяца и сохроним его в столбце month\n",
    "df_calls['month'] = df_calls['call_date'].dt.month"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 265,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "8"
      ]
     },
     "execution_count": 265,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Проверим не появились ли пропуски\n",
    "df_calls['month'].isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 266,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Заполним образовавшиеся пропуски в столбце month нулями\n",
    "df_calls['month'] = df_calls['month'].fillna(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 267,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Изменим тип данных в столбце month на целое число\n",
    "df_calls['month'] = df_calls['month'].astype('int')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 268,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 202607 entries, 0 to 499\n",
      "Data columns (total 12 columns):\n",
      "user_id       202607 non-null int64\n",
      "age           202607 non-null int64\n",
      "churn_date    9919 non-null object\n",
      "city          202607 non-null object\n",
      "first_name    202607 non-null object\n",
      "last_name     202607 non-null object\n",
      "reg_date      202607 non-null object\n",
      "tariff        202607 non-null object\n",
      "id            202607 non-null object\n",
      "call_date     202607 non-null datetime64[ns]\n",
      "duration      202607 non-null float64\n",
      "month         202607 non-null int64\n",
      "dtypes: datetime64[ns](1), float64(1), int64(3), object(7)\n",
      "memory usage: 20.1+ MB\n"
     ]
    }
   ],
   "source": [
    "# Уберем из дата фрейма обнаруженые 8 строк с пропущенными значениями в стобце month, учитывая объем выборки 8 строк не повляют на\n",
    "# качество проводоимого исследования\n",
    "df_calls = df_calls.query('month > 0') \n",
    "df_calls.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 269,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Заполним пропуски в столбце churn_date нулями\n",
    "df_calls['churn_date'] = df_calls['churn_date'].fillna(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 270,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Округлим звонки в большую сторону, для начала изменим тип данных в столбце duration на целое число, округлив в меньшую сторону\n",
    "df_calls['duration'] = (df_calls['duration']).astype('int')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 271,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Напишем функцию прибавляющую единицу к округленным значениям\n",
    "def rounder(row):\n",
    "    if row > 0:\n",
    "        return row + 1\n",
    "    else:\n",
    "        return 0 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 272,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Применим получившуюся функуцию к столбцу duration\n",
    "df_calls['duration'] = df_calls['duration'].apply(rounder)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 273,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>age</th>\n",
       "      <th>churn_date</th>\n",
       "      <th>city</th>\n",
       "      <th>first_name</th>\n",
       "      <th>last_name</th>\n",
       "      <th>reg_date</th>\n",
       "      <th>tariff</th>\n",
       "      <th>id</th>\n",
       "      <th>call_date</th>\n",
       "      <th>duration</th>\n",
       "      <th>month</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1000</td>\n",
       "      <td>52</td>\n",
       "      <td>0</td>\n",
       "      <td>Краснодар</td>\n",
       "      <td>Рафаил</td>\n",
       "      <td>Верещагин</td>\n",
       "      <td>2018-05-25</td>\n",
       "      <td>ultra</td>\n",
       "      <td>1000_0</td>\n",
       "      <td>2018-07-25</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1000</td>\n",
       "      <td>52</td>\n",
       "      <td>0</td>\n",
       "      <td>Краснодар</td>\n",
       "      <td>Рафаил</td>\n",
       "      <td>Верещагин</td>\n",
       "      <td>2018-05-25</td>\n",
       "      <td>ultra</td>\n",
       "      <td>1000_1</td>\n",
       "      <td>2018-08-17</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1000</td>\n",
       "      <td>52</td>\n",
       "      <td>0</td>\n",
       "      <td>Краснодар</td>\n",
       "      <td>Рафаил</td>\n",
       "      <td>Верещагин</td>\n",
       "      <td>2018-05-25</td>\n",
       "      <td>ultra</td>\n",
       "      <td>1000_2</td>\n",
       "      <td>2018-06-11</td>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1000</td>\n",
       "      <td>52</td>\n",
       "      <td>0</td>\n",
       "      <td>Краснодар</td>\n",
       "      <td>Рафаил</td>\n",
       "      <td>Верещагин</td>\n",
       "      <td>2018-05-25</td>\n",
       "      <td>ultra</td>\n",
       "      <td>1000_3</td>\n",
       "      <td>2018-09-21</td>\n",
       "      <td>14</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1000</td>\n",
       "      <td>52</td>\n",
       "      <td>0</td>\n",
       "      <td>Краснодар</td>\n",
       "      <td>Рафаил</td>\n",
       "      <td>Верещагин</td>\n",
       "      <td>2018-05-25</td>\n",
       "      <td>ultra</td>\n",
       "      <td>1000_4</td>\n",
       "      <td>2018-12-15</td>\n",
       "      <td>6</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   user_id  age churn_date       city first_name  last_name    reg_date  \\\n",
       "0     1000   52          0  Краснодар     Рафаил  Верещагин  2018-05-25   \n",
       "0     1000   52          0  Краснодар     Рафаил  Верещагин  2018-05-25   \n",
       "0     1000   52          0  Краснодар     Рафаил  Верещагин  2018-05-25   \n",
       "0     1000   52          0  Краснодар     Рафаил  Верещагин  2018-05-25   \n",
       "0     1000   52          0  Краснодар     Рафаил  Верещагин  2018-05-25   \n",
       "\n",
       "  tariff      id  call_date  duration  month  \n",
       "0  ultra  1000_0 2018-07-25         0      7  \n",
       "0  ultra  1000_1 2018-08-17         0      8  \n",
       "0  ultra  1000_2 2018-06-11         3      6  \n",
       "0  ultra  1000_3 2018-09-21        14      9  \n",
       "0  ultra  1000_4 2018-12-15         6     12  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Проверяем, все значения столбца duration округлены в большую сторону\n",
    "display(df_calls.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 274,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>sum</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>duration</th>\n",
       "      <th>duration</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>user_id</th>\n",
       "      <th>month</th>\n",
       "      <th>churn_date</th>\n",
       "      <th>tariff</th>\n",
       "      <th>city</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td rowspan=\"5\" valign=\"top\">1000</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>ultra</td>\n",
       "      <td>Краснодар</td>\n",
       "      <td>22</td>\n",
       "      <td>158</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>ultra</td>\n",
       "      <td>Краснодар</td>\n",
       "      <td>43</td>\n",
       "      <td>171</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>ultra</td>\n",
       "      <td>Краснодар</td>\n",
       "      <td>47</td>\n",
       "      <td>338</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>ultra</td>\n",
       "      <td>Краснодар</td>\n",
       "      <td>52</td>\n",
       "      <td>408</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>ultra</td>\n",
       "      <td>Краснодар</td>\n",
       "      <td>58</td>\n",
       "      <td>464</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                             count      sum\n",
       "                                          duration duration\n",
       "user_id month churn_date tariff city                       \n",
       "1000    5     0          ultra  Краснодар       22      158\n",
       "        6     0          ultra  Краснодар       43      171\n",
       "        7     0          ultra  Краснодар       47      338\n",
       "        8     0          ultra  Краснодар       52      408\n",
       "        9     0          ultra  Краснодар       58      464"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Сформируем сводную таблицу сгруппировав значения датафрейма df_calls по параметрам user_id и month и для них суммируем \n",
    "# значения столбца duration\n",
    "# Сводную таблицу сохраним в переменной calls_pivot\n",
    "calls_pivot = df_calls.pivot_table(index=['user_id', 'month', 'churn_date', 'tariff', \n",
    "                                         'city'], values='duration', aggfunc=['count','sum'])\n",
    "display(calls_pivot.head())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Подготовим данные датафрейма internet"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 275,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>id</th>\n",
       "      <th>mb_used</th>\n",
       "      <th>session_date</th>\n",
       "      <th>user_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1000_0</td>\n",
       "      <td>112.95</td>\n",
       "      <td>2018-11-25</td>\n",
       "      <td>1000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1000_1</td>\n",
       "      <td>1052.81</td>\n",
       "      <td>2018-09-07</td>\n",
       "      <td>1000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1000_2</td>\n",
       "      <td>1197.26</td>\n",
       "      <td>2018-06-25</td>\n",
       "      <td>1000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>1000_3</td>\n",
       "      <td>550.27</td>\n",
       "      <td>2018-08-22</td>\n",
       "      <td>1000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>1000_4</td>\n",
       "      <td>302.56</td>\n",
       "      <td>2018-09-24</td>\n",
       "      <td>1000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Unnamed: 0      id  mb_used session_date  user_id\n",
       "0           0  1000_0   112.95   2018-11-25     1000\n",
       "1           1  1000_1  1052.81   2018-09-07     1000\n",
       "2           2  1000_2  1197.26   2018-06-25     1000\n",
       "3           3  1000_3   550.27   2018-08-22     1000\n",
       "4           4  1000_4   302.56   2018-09-24     1000"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "display(internet.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 276,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Изменим тип данных в столбце session_date на datetime64\n",
    "internet['session_date'] = pd.to_datetime(internet['session_date'], format='%Y.%m.%dT%H:%M:%S')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 277,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Выделим из дат присутствующих в столбце session_date значения месяца и сохроним его в столбце month\n",
    "internet['month'] = internet['session_date'].dt.month"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 278,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>id</th>\n",
       "      <th>mb_used</th>\n",
       "      <th>session_date</th>\n",
       "      <th>user_id</th>\n",
       "      <th>month</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1000_0</td>\n",
       "      <td>112.95</td>\n",
       "      <td>2018-11-25</td>\n",
       "      <td>1000</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1000_1</td>\n",
       "      <td>1052.81</td>\n",
       "      <td>2018-09-07</td>\n",
       "      <td>1000</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1000_2</td>\n",
       "      <td>1197.26</td>\n",
       "      <td>2018-06-25</td>\n",
       "      <td>1000</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>1000_3</td>\n",
       "      <td>550.27</td>\n",
       "      <td>2018-08-22</td>\n",
       "      <td>1000</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>1000_4</td>\n",
       "      <td>302.56</td>\n",
       "      <td>2018-09-24</td>\n",
       "      <td>1000</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Unnamed: 0      id  mb_used session_date  user_id  month\n",
       "0           0  1000_0   112.95   2018-11-25     1000     11\n",
       "1           1  1000_1  1052.81   2018-09-07     1000      9\n",
       "2           2  1000_2  1197.26   2018-06-25     1000      6\n",
       "3           3  1000_3   550.27   2018-08-22     1000      8\n",
       "4           4  1000_4   302.56   2018-09-24     1000      9"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Проверяем, все значения столбца mb_used округлены в большую сторону\n",
    "display(internet.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 279,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Округлим объем потребляемого трафика в большую сторону, для начала изменим тип данных в столбце mb_used на целое число,\n",
    "# округлив в меньшую сторону\n",
    "internet['mb_used'] = (internet['mb_used']).astype('int')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 280,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Напишем функцию прибавляющую единицу к округленным значениям\n",
    "def rounder(row):\n",
    "    if row > 0:\n",
    "        return row + 1\n",
    "    else:\n",
    "        return 0 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 281,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Применим получившуюся функуцию к столбцу mb_used\n",
    "internet['mb_used'] = internet['mb_used'].apply(rounder)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 282,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>id</th>\n",
       "      <th>mb_used</th>\n",
       "      <th>session_date</th>\n",
       "      <th>user_id</th>\n",
       "      <th>month</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1000_0</td>\n",
       "      <td>113</td>\n",
       "      <td>2018-11-25</td>\n",
       "      <td>1000</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1000_1</td>\n",
       "      <td>1053</td>\n",
       "      <td>2018-09-07</td>\n",
       "      <td>1000</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1000_2</td>\n",
       "      <td>1198</td>\n",
       "      <td>2018-06-25</td>\n",
       "      <td>1000</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>1000_3</td>\n",
       "      <td>551</td>\n",
       "      <td>2018-08-22</td>\n",
       "      <td>1000</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>1000_4</td>\n",
       "      <td>303</td>\n",
       "      <td>2018-09-24</td>\n",
       "      <td>1000</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Unnamed: 0      id  mb_used session_date  user_id  month\n",
       "0           0  1000_0      113   2018-11-25     1000     11\n",
       "1           1  1000_1     1053   2018-09-07     1000      9\n",
       "2           2  1000_2     1198   2018-06-25     1000      6\n",
       "3           3  1000_3      551   2018-08-22     1000      8\n",
       "4           4  1000_4      303   2018-09-24     1000      9"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Проверяем, все значения столбца mb_used округлены в большую сторону\n",
    "display(internet.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 283,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>sum</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>mb_used</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>user_id</th>\n",
       "      <th>month</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td rowspan=\"5\" valign=\"top\">1000</td>\n",
       "      <td>5</td>\n",
       "      <td>2256</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>23257</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7</td>\n",
       "      <td>14016</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>14070</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9</td>\n",
       "      <td>14581</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                  sum\n",
       "              mb_used\n",
       "user_id month        \n",
       "1000    5        2256\n",
       "        6       23257\n",
       "        7       14016\n",
       "        8       14070\n",
       "        9       14581"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Сформируем сводную таблицу сгруппировав значения датафрейма internet по параметрам user_id и month и для них суммируем \n",
    "# значения столбца mb_used\n",
    "# Сводную таблицу сохраним в переменной internet_pivot\n",
    "internet_pivot = internet.pivot_table(index=['user_id','month'], values='mb_used', aggfunc=['sum'])\n",
    "display(internet_pivot.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 284,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th colspan=\"2\" halign=\"left\">sum</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>duration</th>\n",
       "      <th>duration</th>\n",
       "      <th>mb_used</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>user_id</th>\n",
       "      <th>month</th>\n",
       "      <th>churn_date</th>\n",
       "      <th>tariff</th>\n",
       "      <th>city</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td rowspan=\"5\" valign=\"top\">1000</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>ultra</td>\n",
       "      <td>Краснодар</td>\n",
       "      <td>22.0</td>\n",
       "      <td>158.0</td>\n",
       "      <td>2256.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>ultra</td>\n",
       "      <td>Краснодар</td>\n",
       "      <td>43.0</td>\n",
       "      <td>171.0</td>\n",
       "      <td>23257.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>ultra</td>\n",
       "      <td>Краснодар</td>\n",
       "      <td>47.0</td>\n",
       "      <td>338.0</td>\n",
       "      <td>14016.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>ultra</td>\n",
       "      <td>Краснодар</td>\n",
       "      <td>52.0</td>\n",
       "      <td>408.0</td>\n",
       "      <td>14070.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>ultra</td>\n",
       "      <td>Краснодар</td>\n",
       "      <td>58.0</td>\n",
       "      <td>464.0</td>\n",
       "      <td>14581.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                             count      sum         \n",
       "                                          duration duration  mb_used\n",
       "user_id month churn_date tariff city                                \n",
       "1000    5     0          ultra  Краснодар     22.0    158.0   2256.0\n",
       "        6     0          ultra  Краснодар     43.0    171.0  23257.0\n",
       "        7     0          ultra  Краснодар     47.0    338.0  14016.0\n",
       "        8     0          ultra  Краснодар     52.0    408.0  14070.0\n",
       "        9     0          ultra  Краснодар     58.0    464.0  14581.0"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Объединим датафреймы calls_pivot и internet_pivot с помощью метода join, в качестве индекса для объединения зададим \n",
    "# значения столбцов user_id и month, тип объединения применим outer - исключающий потерю данных в случае преобладания количества \n",
    "# значений в любом из датафреймов\n",
    "# Получившийся объединеный датафрейм сохраним под именем df\n",
    "df = calls_pivot.join(internet_pivot, on=['user_id', 'month'], how='outer')\n",
    "display(df.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 285,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "MultiIndex: 3214 entries, (1000, 5, 0, ultra, Краснодар) to (1489, 12, 0, smart, Пермь)\n",
      "Data columns (total 3 columns):\n",
      "(count, duration)    3174 non-null float64\n",
      "(sum, duration)      3174 non-null float64\n",
      "(sum, mb_used)       3203 non-null float64\n",
      "dtypes: float64(3)\n",
      "memory usage: 99.4+ KB\n"
     ]
    }
   ],
   "source": [
    "# Проверяем, при объединении таблиц все значения остались на своих местах\n",
    "df.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Подготовим данные датафрейма messages"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 286,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>message_date</th>\n",
       "      <th>user_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1000_0</td>\n",
       "      <td>2018-06-27</td>\n",
       "      <td>1000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>1000_1</td>\n",
       "      <td>2018-10-08</td>\n",
       "      <td>1000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>1000_2</td>\n",
       "      <td>2018-08-04</td>\n",
       "      <td>1000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>1000_3</td>\n",
       "      <td>2018-06-16</td>\n",
       "      <td>1000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>1000_4</td>\n",
       "      <td>2018-12-05</td>\n",
       "      <td>1000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       id message_date  user_id\n",
       "0  1000_0   2018-06-27     1000\n",
       "1  1000_1   2018-10-08     1000\n",
       "2  1000_2   2018-08-04     1000\n",
       "3  1000_3   2018-06-16     1000\n",
       "4  1000_4   2018-12-05     1000"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "display(messages.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 287,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Изменим тип данных в столбце message_date на datetime64\n",
    "messages['message_date'] = pd.to_datetime(messages['message_date'], format='%Y.%m.%dT%H:%M:%S')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 288,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Выделим из дат присутствующих в столбце message_date значения месяца и сохроним его в столбце month\n",
    "messages['month'] = messages['message_date'].dt.month"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 289,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>message_date</th>\n",
       "      <th>user_id</th>\n",
       "      <th>month</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1000_0</td>\n",
       "      <td>2018-06-27</td>\n",
       "      <td>1000</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>1000_1</td>\n",
       "      <td>2018-10-08</td>\n",
       "      <td>1000</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>1000_2</td>\n",
       "      <td>2018-08-04</td>\n",
       "      <td>1000</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>1000_3</td>\n",
       "      <td>2018-06-16</td>\n",
       "      <td>1000</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>1000_4</td>\n",
       "      <td>2018-12-05</td>\n",
       "      <td>1000</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       id message_date  user_id  month\n",
       "0  1000_0   2018-06-27     1000      6\n",
       "1  1000_1   2018-10-08     1000     10\n",
       "2  1000_2   2018-08-04     1000      8\n",
       "3  1000_3   2018-06-16     1000      6\n",
       "4  1000_4   2018-12-05     1000     12"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "display(messages.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 290,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Для упрощения дальнейшего визуального понимания объединенных таблиц переименуем столбец id в messages\n",
    "messages.rename(columns={'id': 'messages'}, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 291,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>messages</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>user_id</th>\n",
       "      <th>month</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td rowspan=\"5\" valign=\"top\">1000</td>\n",
       "      <td>5</td>\n",
       "      <td>22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7</td>\n",
       "      <td>75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>81</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9</td>\n",
       "      <td>57</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 count\n",
       "              messages\n",
       "user_id month         \n",
       "1000    5           22\n",
       "        6           60\n",
       "        7           75\n",
       "        8           81\n",
       "        9           57"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Сформируем сводную таблицу сгруппировав значения датафрейма messages по параметрам user_id и month и для них подсчитаем \n",
    "# количество значений в столбце messages методом count\n",
    "# Сводную таблицу сохраним в переменной messages_pivot\n",
    "messages_pivot = messages.pivot_table(index=['user_id','month'], values='messages', aggfunc=['count'])\n",
    "display(messages_pivot.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 292,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "MultiIndex: 2717 entries, (1000, 5) to (1499, 12)\n",
      "Data columns (total 1 columns):\n",
      "(count, messages)    2717 non-null int64\n",
      "dtypes: int64(1)\n",
      "memory usage: 32.8 KB\n"
     ]
    }
   ],
   "source": [
    "messages_pivot.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 293,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Объединим датафреймы messages_pivot и df с помощью метода join, в качестве индекса для объединения зададим \n",
    "# значения столбцов user_id и month, тип объединения применим outer - исключающий потерю данных в случае преобладания количества \n",
    "# значений в любом из датафреймов\n",
    "# Получившийся объединеный датафрейм сохраним под именем df\n",
    "df = df.join(messages_pivot, on=['user_id', 'month'], how='outer')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 294,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th colspan=\"2\" halign=\"left\">sum</th>\n",
       "      <th>count</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>duration</th>\n",
       "      <th>duration</th>\n",
       "      <th>mb_used</th>\n",
       "      <th>messages</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>user_id</th>\n",
       "      <th>month</th>\n",
       "      <th>churn_date</th>\n",
       "      <th>tariff</th>\n",
       "      <th>city</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td rowspan=\"5\" valign=\"top\">1000</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>ultra</td>\n",
       "      <td>Краснодар</td>\n",
       "      <td>22.0</td>\n",
       "      <td>158.0</td>\n",
       "      <td>2256.0</td>\n",
       "      <td>22.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>ultra</td>\n",
       "      <td>Краснодар</td>\n",
       "      <td>43.0</td>\n",
       "      <td>171.0</td>\n",
       "      <td>23257.0</td>\n",
       "      <td>60.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>ultra</td>\n",
       "      <td>Краснодар</td>\n",
       "      <td>47.0</td>\n",
       "      <td>338.0</td>\n",
       "      <td>14016.0</td>\n",
       "      <td>75.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>ultra</td>\n",
       "      <td>Краснодар</td>\n",
       "      <td>52.0</td>\n",
       "      <td>408.0</td>\n",
       "      <td>14070.0</td>\n",
       "      <td>81.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>ultra</td>\n",
       "      <td>Краснодар</td>\n",
       "      <td>58.0</td>\n",
       "      <td>464.0</td>\n",
       "      <td>14581.0</td>\n",
       "      <td>57.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                             count      sum             count\n",
       "                                          duration duration  mb_used messages\n",
       "user_id month churn_date tariff city                                         \n",
       "1000    5     0          ultra  Краснодар     22.0    158.0   2256.0     22.0\n",
       "        6     0          ultra  Краснодар     43.0    171.0  23257.0     60.0\n",
       "        7     0          ultra  Краснодар     47.0    338.0  14016.0     75.0\n",
       "        8     0          ultra  Краснодар     52.0    408.0  14070.0     81.0\n",
       "        9     0          ultra  Краснодар     58.0    464.0  14581.0     57.0"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "display(df.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 295,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "MultiIndex: 3214 entries, (1000, 5, 0, ultra, Краснодар) to (1489, 12, 0, smart, Пермь)\n",
      "Data columns (total 4 columns):\n",
      "(count, duration)    3174 non-null float64\n",
      "(sum, duration)      3174 non-null float64\n",
      "(sum, mb_used)       3203 non-null float64\n",
      "(count, messages)    2717 non-null float64\n",
      "dtypes: float64(4)\n",
      "memory usage: 124.5+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 296,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Таблицы объединены удачно, значения всех столбцов на месте, однако присутствующие, воникшие в разультате многкратного объединения \n",
    "# сводных таблиц, мультииндексы, существенно затруднят дальнейшую работу с данными, поэтому обнулим индексацию получившегося \n",
    "# датафрейма\n",
    "df.reset_index(level=1, inplace=True)\n",
    "df.reset_index(level=0, inplace=True)\n",
    "df.reset_index(level=0, inplace=True)\n",
    "df.reset_index(level=0, inplace=True)\n",
    "df.reset_index(level=0, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 297,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Вернем столбцам их названия потерянные в результате обнуления индексов\n",
    "df.set_axis(['city','tariff','churn_date', 'user_id','month','calls_count',\n",
    "             'calls_duration', 'mb_used', 'messages'],axis='columns',inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 298,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>city</th>\n",
       "      <th>tariff</th>\n",
       "      <th>churn_date</th>\n",
       "      <th>month</th>\n",
       "      <th>calls_count</th>\n",
       "      <th>calls_duration</th>\n",
       "      <th>mb_used</th>\n",
       "      <th>messages</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1000</td>\n",
       "      <td>Краснодар</td>\n",
       "      <td>ultra</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>22.0</td>\n",
       "      <td>158.0</td>\n",
       "      <td>2256.0</td>\n",
       "      <td>22.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>1000</td>\n",
       "      <td>Краснодар</td>\n",
       "      <td>ultra</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>43.0</td>\n",
       "      <td>171.0</td>\n",
       "      <td>23257.0</td>\n",
       "      <td>60.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>1000</td>\n",
       "      <td>Краснодар</td>\n",
       "      <td>ultra</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>47.0</td>\n",
       "      <td>338.0</td>\n",
       "      <td>14016.0</td>\n",
       "      <td>75.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>1000</td>\n",
       "      <td>Краснодар</td>\n",
       "      <td>ultra</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>52.0</td>\n",
       "      <td>408.0</td>\n",
       "      <td>14070.0</td>\n",
       "      <td>81.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>1000</td>\n",
       "      <td>Краснодар</td>\n",
       "      <td>ultra</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>58.0</td>\n",
       "      <td>464.0</td>\n",
       "      <td>14581.0</td>\n",
       "      <td>57.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   user_id       city tariff churn_date  month  calls_count  calls_duration  \\\n",
       "0     1000  Краснодар  ultra          0      5         22.0           158.0   \n",
       "1     1000  Краснодар  ultra          0      6         43.0           171.0   \n",
       "2     1000  Краснодар  ultra          0      7         47.0           338.0   \n",
       "3     1000  Краснодар  ultra          0      8         52.0           408.0   \n",
       "4     1000  Краснодар  ultra          0      9         58.0           464.0   \n",
       "\n",
       "   mb_used  messages  \n",
       "0   2256.0      22.0  \n",
       "1  23257.0      60.0  \n",
       "2  14016.0      75.0  \n",
       "3  14070.0      81.0  \n",
       "4  14581.0      57.0  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Для удобства использования датафрейма сменим порядок размещения столбцов\n",
    "df = df.loc[:, ['user_id', 'city','tariff','churn_date', 'month','calls_count',\n",
    "             'calls_duration', 'mb_used', 'messages']]\n",
    "display(df.head())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Подготовим данные датафрейма tariffs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 299,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>messages_included</th>\n",
       "      <th>mb_per_month_included</th>\n",
       "      <th>minutes_included</th>\n",
       "      <th>rub_monthly_fee</th>\n",
       "      <th>rub_per_gb</th>\n",
       "      <th>rub_per_message</th>\n",
       "      <th>rub_per_minute</th>\n",
       "      <th>tariff_name</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>50</td>\n",
       "      <td>15360</td>\n",
       "      <td>500</td>\n",
       "      <td>550</td>\n",
       "      <td>200</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>smart</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>1000</td>\n",
       "      <td>30720</td>\n",
       "      <td>3000</td>\n",
       "      <td>1950</td>\n",
       "      <td>150</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>ultra</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   messages_included  mb_per_month_included  minutes_included  \\\n",
       "0                 50                  15360               500   \n",
       "1               1000                  30720              3000   \n",
       "\n",
       "   rub_monthly_fee  rub_per_gb  rub_per_message  rub_per_minute tariff_name  \n",
       "0              550         200                3               3       smart  \n",
       "1             1950         150                1               1       ultra  "
      ]
     },
     "execution_count": 299,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tariffs.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 300,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Объединение датафрейма tariffs с датафреймом df возможно только по названию тарифа поэтому переименуем столбец tariff_name \n",
    "# в tariff\n",
    "tariffs.rename(columns={'tariff_name':'tariff'}, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 301,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Объединим датафреймы df и tarif с помощью метода merge, по значениям столбца tariffs \n",
    "# Получившийся объединеный датафрейм сохраним под именем df\n",
    "df = df.merge(tariffs, how='left')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 302,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>city</th>\n",
       "      <th>tariff</th>\n",
       "      <th>churn_date</th>\n",
       "      <th>month</th>\n",
       "      <th>calls_count</th>\n",
       "      <th>calls_duration</th>\n",
       "      <th>mb_used</th>\n",
       "      <th>messages</th>\n",
       "      <th>messages_included</th>\n",
       "      <th>mb_per_month_included</th>\n",
       "      <th>minutes_included</th>\n",
       "      <th>rub_monthly_fee</th>\n",
       "      <th>rub_per_gb</th>\n",
       "      <th>rub_per_message</th>\n",
       "      <th>rub_per_minute</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1000</td>\n",
       "      <td>Краснодар</td>\n",
       "      <td>ultra</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>22.0</td>\n",
       "      <td>158.0</td>\n",
       "      <td>2256.0</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1000</td>\n",
       "      <td>30720</td>\n",
       "      <td>3000</td>\n",
       "      <td>1950</td>\n",
       "      <td>150</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>1000</td>\n",
       "      <td>Краснодар</td>\n",
       "      <td>ultra</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>43.0</td>\n",
       "      <td>171.0</td>\n",
       "      <td>23257.0</td>\n",
       "      <td>60.0</td>\n",
       "      <td>1000</td>\n",
       "      <td>30720</td>\n",
       "      <td>3000</td>\n",
       "      <td>1950</td>\n",
       "      <td>150</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>1000</td>\n",
       "      <td>Краснодар</td>\n",
       "      <td>ultra</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>47.0</td>\n",
       "      <td>338.0</td>\n",
       "      <td>14016.0</td>\n",
       "      <td>75.0</td>\n",
       "      <td>1000</td>\n",
       "      <td>30720</td>\n",
       "      <td>3000</td>\n",
       "      <td>1950</td>\n",
       "      <td>150</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>1000</td>\n",
       "      <td>Краснодар</td>\n",
       "      <td>ultra</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>52.0</td>\n",
       "      <td>408.0</td>\n",
       "      <td>14070.0</td>\n",
       "      <td>81.0</td>\n",
       "      <td>1000</td>\n",
       "      <td>30720</td>\n",
       "      <td>3000</td>\n",
       "      <td>1950</td>\n",
       "      <td>150</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>1000</td>\n",
       "      <td>Краснодар</td>\n",
       "      <td>ultra</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>58.0</td>\n",
       "      <td>464.0</td>\n",
       "      <td>14581.0</td>\n",
       "      <td>57.0</td>\n",
       "      <td>1000</td>\n",
       "      <td>30720</td>\n",
       "      <td>3000</td>\n",
       "      <td>1950</td>\n",
       "      <td>150</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   user_id       city tariff churn_date  month  calls_count  calls_duration  \\\n",
       "0     1000  Краснодар  ultra          0      5         22.0           158.0   \n",
       "1     1000  Краснодар  ultra          0      6         43.0           171.0   \n",
       "2     1000  Краснодар  ultra          0      7         47.0           338.0   \n",
       "3     1000  Краснодар  ultra          0      8         52.0           408.0   \n",
       "4     1000  Краснодар  ultra          0      9         58.0           464.0   \n",
       "\n",
       "   mb_used  messages  messages_included  mb_per_month_included  \\\n",
       "0   2256.0      22.0               1000                  30720   \n",
       "1  23257.0      60.0               1000                  30720   \n",
       "2  14016.0      75.0               1000                  30720   \n",
       "3  14070.0      81.0               1000                  30720   \n",
       "4  14581.0      57.0               1000                  30720   \n",
       "\n",
       "   minutes_included  rub_monthly_fee  rub_per_gb  rub_per_message  \\\n",
       "0              3000             1950         150                1   \n",
       "1              3000             1950         150                1   \n",
       "2              3000             1950         150                1   \n",
       "3              3000             1950         150                1   \n",
       "4              3000             1950         150                1   \n",
       "\n",
       "   rub_per_minute  \n",
       "0               1  \n",
       "1               1  \n",
       "2               1  \n",
       "3               1  \n",
       "4               1  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "display(df.head())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Заполним пропуски и приведем данные к нужным типам"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 303,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "user_id                    0\n",
       "city                       0\n",
       "tariff                     0\n",
       "churn_date                 0\n",
       "month                      0\n",
       "calls_count               40\n",
       "calls_duration            40\n",
       "mb_used                   11\n",
       "messages                 497\n",
       "messages_included          0\n",
       "mb_per_month_included      0\n",
       "minutes_included           0\n",
       "rub_monthly_fee            0\n",
       "rub_per_gb                 0\n",
       "rub_per_message            0\n",
       "rub_per_minute             0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 303,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Подсчитаем число образовавшихся в ходе объединения пропусков\n",
    "df.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 304,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "user_id                  0\n",
       "city                     0\n",
       "tariff                   0\n",
       "churn_date               0\n",
       "month                    0\n",
       "calls_count              0\n",
       "calls_duration           0\n",
       "mb_used                  0\n",
       "messages                 0\n",
       "messages_included        0\n",
       "mb_per_month_included    0\n",
       "minutes_included         0\n",
       "rub_monthly_fee          0\n",
       "rub_per_gb               0\n",
       "rub_per_message          0\n",
       "rub_per_minute           0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 304,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Уберем пропущенные значения в столбцах messages, mb_used, calls_duration, calls_count, возникшими в результате того что \n",
    "# пользователи не пользовались данными видами услуг соответственно заполним пропуски нулями\n",
    "df = df.fillna(0)\n",
    "df.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 305,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Приведем значения столбцов duration, mb_used, calls_count, messages к типу данных int\n",
    "columns = ['calls_count', 'calls_duration', 'mb_used', 'messages']\n",
    "df[columns] = df[columns].astype('int')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 306,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 3214 entries, 0 to 3213\n",
      "Data columns (total 16 columns):\n",
      "user_id                  3214 non-null int64\n",
      "city                     3214 non-null object\n",
      "tariff                   3214 non-null object\n",
      "churn_date               3214 non-null object\n",
      "month                    3214 non-null int64\n",
      "calls_count              3214 non-null int64\n",
      "calls_duration           3214 non-null int64\n",
      "mb_used                  3214 non-null int64\n",
      "messages                 3214 non-null int64\n",
      "messages_included        3214 non-null int64\n",
      "mb_per_month_included    3214 non-null int64\n",
      "minutes_included         3214 non-null int64\n",
      "rub_monthly_fee          3214 non-null int64\n",
      "rub_per_gb               3214 non-null int64\n",
      "rub_per_message          3214 non-null int64\n",
      "rub_per_minute           3214 non-null int64\n",
      "dtypes: int64(13), object(3)\n",
      "memory usage: 426.9+ KB\n"
     ]
    }
   ],
   "source": [
    "# Проверям, типы данных изменены успешно\n",
    "df.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "####  Посчитаем месячную выручку для каждого пользователя"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 307,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>city</th>\n",
       "      <th>tariff</th>\n",
       "      <th>churn_date</th>\n",
       "      <th>month</th>\n",
       "      <th>calls_count</th>\n",
       "      <th>calls_duration</th>\n",
       "      <th>mb_used</th>\n",
       "      <th>messages</th>\n",
       "      <th>messages_included</th>\n",
       "      <th>mb_per_month_included</th>\n",
       "      <th>minutes_included</th>\n",
       "      <th>rub_monthly_fee</th>\n",
       "      <th>rub_per_gb</th>\n",
       "      <th>rub_per_message</th>\n",
       "      <th>rub_per_minute</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1000</td>\n",
       "      <td>Краснодар</td>\n",
       "      <td>ultra</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>22</td>\n",
       "      <td>158</td>\n",
       "      <td>2256</td>\n",
       "      <td>22</td>\n",
       "      <td>1000</td>\n",
       "      <td>30720</td>\n",
       "      <td>3000</td>\n",
       "      <td>1950</td>\n",
       "      <td>150</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>1000</td>\n",
       "      <td>Краснодар</td>\n",
       "      <td>ultra</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>43</td>\n",
       "      <td>171</td>\n",
       "      <td>23257</td>\n",
       "      <td>60</td>\n",
       "      <td>1000</td>\n",
       "      <td>30720</td>\n",
       "      <td>3000</td>\n",
       "      <td>1950</td>\n",
       "      <td>150</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>1000</td>\n",
       "      <td>Краснодар</td>\n",
       "      <td>ultra</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>47</td>\n",
       "      <td>338</td>\n",
       "      <td>14016</td>\n",
       "      <td>75</td>\n",
       "      <td>1000</td>\n",
       "      <td>30720</td>\n",
       "      <td>3000</td>\n",
       "      <td>1950</td>\n",
       "      <td>150</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>1000</td>\n",
       "      <td>Краснодар</td>\n",
       "      <td>ultra</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>52</td>\n",
       "      <td>408</td>\n",
       "      <td>14070</td>\n",
       "      <td>81</td>\n",
       "      <td>1000</td>\n",
       "      <td>30720</td>\n",
       "      <td>3000</td>\n",
       "      <td>1950</td>\n",
       "      <td>150</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>1000</td>\n",
       "      <td>Краснодар</td>\n",
       "      <td>ultra</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>58</td>\n",
       "      <td>464</td>\n",
       "      <td>14581</td>\n",
       "      <td>57</td>\n",
       "      <td>1000</td>\n",
       "      <td>30720</td>\n",
       "      <td>3000</td>\n",
       "      <td>1950</td>\n",
       "      <td>150</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   user_id       city tariff churn_date  month  calls_count  calls_duration  \\\n",
       "0     1000  Краснодар  ultra          0      5           22             158   \n",
       "1     1000  Краснодар  ultra          0      6           43             171   \n",
       "2     1000  Краснодар  ultra          0      7           47             338   \n",
       "3     1000  Краснодар  ultra          0      8           52             408   \n",
       "4     1000  Краснодар  ultra          0      9           58             464   \n",
       "\n",
       "   mb_used  messages  messages_included  mb_per_month_included  \\\n",
       "0     2256        22               1000                  30720   \n",
       "1    23257        60               1000                  30720   \n",
       "2    14016        75               1000                  30720   \n",
       "3    14070        81               1000                  30720   \n",
       "4    14581        57               1000                  30720   \n",
       "\n",
       "   minutes_included  rub_monthly_fee  rub_per_gb  rub_per_message  \\\n",
       "0              3000             1950         150                1   \n",
       "1              3000             1950         150                1   \n",
       "2              3000             1950         150                1   \n",
       "3              3000             1950         150                1   \n",
       "4              3000             1950         150                1   \n",
       "\n",
       "   rub_per_minute  \n",
       "0               1  \n",
       "1               1  \n",
       "2               1  \n",
       "3               1  \n",
       "4               1  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "display(df.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 308,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Напишем функцию задача которой вычитать бесплатный лимит из суммарного количества звонков, сообщений и интернет-трафика, а\n",
    "# остаток умножать на значение из тарифного плана, затем прибавлять абонентскую плату, соответствующую тарифному плану.\n",
    "def month_payment(row):\n",
    "    minutes_payment = 0\n",
    "    internet_payment = 0\n",
    "    messages_payment = 0\n",
    "    payment = 0\n",
    "    \n",
    "    if row['calls_duration'] > row['minutes_included']:\n",
    "        minutes_payment = (row['calls_duration'] - row['minutes_included'])*row['rub_per_minute']\n",
    "    if row['mb_used'] > row['mb_per_month_included']:\n",
    "        internet_payment = ((row['mb_used'] - row['mb_per_month_included']) / 1000)*row['rub_per_gb']\n",
    "    if row['messages'] > row['messages_included']:\n",
    "        messages_payment = (row['messages'] - row['messages_included'])*row['rub_per_message']\n",
    "    month_payment = minutes_payment + internet_payment + messages_payment + row['rub_monthly_fee']\n",
    "    return month_payment\n",
    "            "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 309,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Применим получившуюся функцию month_payment к столбцу month_payment\n",
    "df['month_payment'] = df.apply(month_payment, axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 310,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>city</th>\n",
       "      <th>tariff</th>\n",
       "      <th>churn_date</th>\n",
       "      <th>month</th>\n",
       "      <th>calls_count</th>\n",
       "      <th>calls_duration</th>\n",
       "      <th>mb_used</th>\n",
       "      <th>messages</th>\n",
       "      <th>messages_included</th>\n",
       "      <th>mb_per_month_included</th>\n",
       "      <th>minutes_included</th>\n",
       "      <th>rub_monthly_fee</th>\n",
       "      <th>rub_per_gb</th>\n",
       "      <th>rub_per_message</th>\n",
       "      <th>rub_per_minute</th>\n",
       "      <th>month_payment</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>1893</td>\n",
       "      <td>1302</td>\n",
       "      <td>Уфа</td>\n",
       "      <td>smart</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>43</td>\n",
       "      <td>306</td>\n",
       "      <td>15285</td>\n",
       "      <td>59</td>\n",
       "      <td>50</td>\n",
       "      <td>15360</td>\n",
       "      <td>500</td>\n",
       "      <td>550</td>\n",
       "      <td>200</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>577.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2308</td>\n",
       "      <td>1372</td>\n",
       "      <td>Магнитогорск</td>\n",
       "      <td>smart</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>64</td>\n",
       "      <td>473</td>\n",
       "      <td>13253</td>\n",
       "      <td>32</td>\n",
       "      <td>50</td>\n",
       "      <td>15360</td>\n",
       "      <td>500</td>\n",
       "      <td>550</td>\n",
       "      <td>200</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>550.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1223</td>\n",
       "      <td>1193</td>\n",
       "      <td>Тамбов</td>\n",
       "      <td>smart</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>76</td>\n",
       "      <td>549</td>\n",
       "      <td>12289</td>\n",
       "      <td>20</td>\n",
       "      <td>50</td>\n",
       "      <td>15360</td>\n",
       "      <td>500</td>\n",
       "      <td>550</td>\n",
       "      <td>200</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>697.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3060</td>\n",
       "      <td>1480</td>\n",
       "      <td>Новокузнецк</td>\n",
       "      <td>smart</td>\n",
       "      <td>2018-09-26</td>\n",
       "      <td>3</td>\n",
       "      <td>62</td>\n",
       "      <td>422</td>\n",
       "      <td>14340</td>\n",
       "      <td>19</td>\n",
       "      <td>50</td>\n",
       "      <td>15360</td>\n",
       "      <td>500</td>\n",
       "      <td>550</td>\n",
       "      <td>200</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>550.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3005</td>\n",
       "      <td>1472</td>\n",
       "      <td>Ярославль</td>\n",
       "      <td>smart</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>56</td>\n",
       "      <td>460</td>\n",
       "      <td>19171</td>\n",
       "      <td>80</td>\n",
       "      <td>50</td>\n",
       "      <td>15360</td>\n",
       "      <td>500</td>\n",
       "      <td>550</td>\n",
       "      <td>200</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>1402.2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      user_id          city tariff  churn_date  month  calls_count  \\\n",
       "1893     1302           Уфа  smart           0      4           43   \n",
       "2308     1372  Магнитогорск  smart           0      3           64   \n",
       "1223     1193        Тамбов  smart           0      4           76   \n",
       "3060     1480   Новокузнецк  smart  2018-09-26      3           62   \n",
       "3005     1472     Ярославль  smart           0      2           56   \n",
       "\n",
       "      calls_duration  mb_used  messages  messages_included  \\\n",
       "1893             306    15285        59                 50   \n",
       "2308             473    13253        32                 50   \n",
       "1223             549    12289        20                 50   \n",
       "3060             422    14340        19                 50   \n",
       "3005             460    19171        80                 50   \n",
       "\n",
       "      mb_per_month_included  minutes_included  rub_monthly_fee  rub_per_gb  \\\n",
       "1893                  15360               500              550         200   \n",
       "2308                  15360               500              550         200   \n",
       "1223                  15360               500              550         200   \n",
       "3060                  15360               500              550         200   \n",
       "3005                  15360               500              550         200   \n",
       "\n",
       "      rub_per_message  rub_per_minute  month_payment  \n",
       "1893                3               3          577.0  \n",
       "2308                3               3          550.0  \n",
       "1223                3               3          697.0  \n",
       "3060                3               3          550.0  \n",
       "3005                3               3         1402.2  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Проверяем, месячны платеж посчитан\n",
    "display(df.sample(5))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Шаг 3. Проанализируем данные"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Опишем поведение клиентов оператора, исходя из выборки. Ответим на вопросы сколько минут разговора, сколько сообщений и какой объём интернет-трафика требуется пользователям каждого тарифа в месяц? Посчитаем среднее количество, дисперсию и стандартное отклонение. Построим гистограммы. Опишем распределения."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 311,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>month_payment</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>tariff</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>smart</td>\n",
       "      <td>2833982.60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>ultra</td>\n",
       "      <td>1963018.05</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        month_payment\n",
       "tariff               \n",
       "smart      2833982.60\n",
       "ultra      1963018.05"
      ]
     },
     "execution_count": 311,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Посчитаем прибыль от тарифов в абсолютных величинах\n",
    "df.pivot_table(index='tariff', values='month_payment', aggfunc='sum')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 312,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>calls_duration</th>\n",
       "      <th>mb_used</th>\n",
       "      <th>messages</th>\n",
       "      <th>month_payment</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>tariff</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>smart</td>\n",
       "      <td>409.740610</td>\n",
       "      <td>16281.200619</td>\n",
       "      <td>33.762704</td>\n",
       "      <td>1252.312240</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>ultra</td>\n",
       "      <td>542.892744</td>\n",
       "      <td>19480.901157</td>\n",
       "      <td>49.033649</td>\n",
       "      <td>2064.161987</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        calls_duration       mb_used   messages  month_payment\n",
       "tariff                                                        \n",
       "smart       409.740610  16281.200619  33.762704    1252.312240\n",
       "ultra       542.892744  19480.901157  49.033649    2064.161987"
      ]
     },
     "execution_count": 312,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Посчитаем сколько минут разговора, сколько сообщений и какой объём интернет-трафика требуется пользователям каждого тарифа в месяц\n",
    "df.pivot_table(index='tariff', values=['month_payment','calls_duration','messages', 'mb_used'], aggfunc='mean')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 313,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>month</th>\n",
       "      <th>calls_count</th>\n",
       "      <th>calls_duration</th>\n",
       "      <th>mb_used</th>\n",
       "      <th>messages</th>\n",
       "      <th>messages_included</th>\n",
       "      <th>mb_per_month_included</th>\n",
       "      <th>minutes_included</th>\n",
       "      <th>rub_monthly_fee</th>\n",
       "      <th>rub_per_gb</th>\n",
       "      <th>rub_per_message</th>\n",
       "      <th>rub_per_minute</th>\n",
       "      <th>month_payment</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>count</td>\n",
       "      <td>3214.000000</td>\n",
       "      <td>3214.000000</td>\n",
       "      <td>3214.000000</td>\n",
       "      <td>3214.000000</td>\n",
       "      <td>3214.000000</td>\n",
       "      <td>3214.000000</td>\n",
       "      <td>3214.000000</td>\n",
       "      <td>3214.000000</td>\n",
       "      <td>3214.000000</td>\n",
       "      <td>3214.000000</td>\n",
       "      <td>3214.000000</td>\n",
       "      <td>3214.000000</td>\n",
       "      <td>3214.000000</td>\n",
       "      <td>3214.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>mean</td>\n",
       "      <td>1251.590230</td>\n",
       "      <td>8.317362</td>\n",
       "      <td>63.038892</td>\n",
       "      <td>449.139390</td>\n",
       "      <td>17227.969508</td>\n",
       "      <td>38.281269</td>\n",
       "      <td>331.098320</td>\n",
       "      <td>19904.915993</td>\n",
       "      <td>1239.732421</td>\n",
       "      <td>964.250156</td>\n",
       "      <td>185.205352</td>\n",
       "      <td>2.408214</td>\n",
       "      <td>2.408214</td>\n",
       "      <td>1492.532872</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>std</td>\n",
       "      <td>144.659172</td>\n",
       "      <td>2.905413</td>\n",
       "      <td>33.236368</td>\n",
       "      <td>240.835405</td>\n",
       "      <td>7578.422420</td>\n",
       "      <td>36.148326</td>\n",
       "      <td>433.688436</td>\n",
       "      <td>7012.057232</td>\n",
       "      <td>1141.285357</td>\n",
       "      <td>639.119800</td>\n",
       "      <td>22.825707</td>\n",
       "      <td>0.913028</td>\n",
       "      <td>0.913028</td>\n",
       "      <td>807.021140</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>min</td>\n",
       "      <td>1000.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>50.000000</td>\n",
       "      <td>15360.000000</td>\n",
       "      <td>500.000000</td>\n",
       "      <td>550.000000</td>\n",
       "      <td>150.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>550.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>25%</td>\n",
       "      <td>1125.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>40.000000</td>\n",
       "      <td>282.000000</td>\n",
       "      <td>12505.250000</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>50.000000</td>\n",
       "      <td>15360.000000</td>\n",
       "      <td>500.000000</td>\n",
       "      <td>550.000000</td>\n",
       "      <td>150.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>685.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>50%</td>\n",
       "      <td>1253.000000</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>62.000000</td>\n",
       "      <td>441.000000</td>\n",
       "      <td>16967.000000</td>\n",
       "      <td>30.000000</td>\n",
       "      <td>50.000000</td>\n",
       "      <td>15360.000000</td>\n",
       "      <td>500.000000</td>\n",
       "      <td>550.000000</td>\n",
       "      <td>200.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>1548.400000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>75%</td>\n",
       "      <td>1378.750000</td>\n",
       "      <td>11.000000</td>\n",
       "      <td>82.000000</td>\n",
       "      <td>586.000000</td>\n",
       "      <td>21450.250000</td>\n",
       "      <td>57.000000</td>\n",
       "      <td>1000.000000</td>\n",
       "      <td>30720.000000</td>\n",
       "      <td>3000.000000</td>\n",
       "      <td>1950.000000</td>\n",
       "      <td>200.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>1950.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>max</td>\n",
       "      <td>1499.000000</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>244.000000</td>\n",
       "      <td>1659.000000</td>\n",
       "      <td>49789.000000</td>\n",
       "      <td>224.000000</td>\n",
       "      <td>1000.000000</td>\n",
       "      <td>30720.000000</td>\n",
       "      <td>3000.000000</td>\n",
       "      <td>1950.000000</td>\n",
       "      <td>200.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>6787.200000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           user_id        month  calls_count  calls_duration       mb_used  \\\n",
       "count  3214.000000  3214.000000  3214.000000     3214.000000   3214.000000   \n",
       "mean   1251.590230     8.317362    63.038892      449.139390  17227.969508   \n",
       "std     144.659172     2.905413    33.236368      240.835405   7578.422420   \n",
       "min    1000.000000     1.000000     0.000000        0.000000      0.000000   \n",
       "25%    1125.000000     6.000000    40.000000      282.000000  12505.250000   \n",
       "50%    1253.000000     9.000000    62.000000      441.000000  16967.000000   \n",
       "75%    1378.750000    11.000000    82.000000      586.000000  21450.250000   \n",
       "max    1499.000000    12.000000   244.000000     1659.000000  49789.000000   \n",
       "\n",
       "          messages  messages_included  mb_per_month_included  \\\n",
       "count  3214.000000        3214.000000            3214.000000   \n",
       "mean     38.281269         331.098320           19904.915993   \n",
       "std      36.148326         433.688436            7012.057232   \n",
       "min       0.000000          50.000000           15360.000000   \n",
       "25%       9.000000          50.000000           15360.000000   \n",
       "50%      30.000000          50.000000           15360.000000   \n",
       "75%      57.000000        1000.000000           30720.000000   \n",
       "max     224.000000        1000.000000           30720.000000   \n",
       "\n",
       "       minutes_included  rub_monthly_fee   rub_per_gb  rub_per_message  \\\n",
       "count       3214.000000      3214.000000  3214.000000      3214.000000   \n",
       "mean        1239.732421       964.250156   185.205352         2.408214   \n",
       "std         1141.285357       639.119800    22.825707         0.913028   \n",
       "min          500.000000       550.000000   150.000000         1.000000   \n",
       "25%          500.000000       550.000000   150.000000         1.000000   \n",
       "50%          500.000000       550.000000   200.000000         3.000000   \n",
       "75%         3000.000000      1950.000000   200.000000         3.000000   \n",
       "max         3000.000000      1950.000000   200.000000         3.000000   \n",
       "\n",
       "       rub_per_minute  month_payment  \n",
       "count     3214.000000    3214.000000  \n",
       "mean         2.408214    1492.532872  \n",
       "std          0.913028     807.021140  \n",
       "min          1.000000     550.000000  \n",
       "25%          1.000000     685.000000  \n",
       "50%          3.000000    1548.400000  \n",
       "75%          3.000000    1950.000000  \n",
       "max          3.000000    6787.200000  "
      ]
     },
     "execution_count": 313,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Проанализируем данные методом discribe()\n",
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 314,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th colspan=\"3\" halign=\"left\">mean</th>\n",
       "      <th colspan=\"3\" halign=\"left\">var</th>\n",
       "      <th colspan=\"3\" halign=\"left\">std</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>calls_duration</th>\n",
       "      <th>mb_used</th>\n",
       "      <th>messages</th>\n",
       "      <th>calls_duration</th>\n",
       "      <th>mb_used</th>\n",
       "      <th>messages</th>\n",
       "      <th>calls_duration</th>\n",
       "      <th>mb_used</th>\n",
       "      <th>messages</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>tariff</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>smart</td>\n",
       "      <td>409.740610</td>\n",
       "      <td>16281.200619</td>\n",
       "      <td>33.762704</td>\n",
       "      <td>37942.097585</td>\n",
       "      <td>3.539799e+07</td>\n",
       "      <td>863.608122</td>\n",
       "      <td>194.787314</td>\n",
       "      <td>5949.620693</td>\n",
       "      <td>29.387210</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>ultra</td>\n",
       "      <td>542.892744</td>\n",
       "      <td>19480.901157</td>\n",
       "      <td>49.033649</td>\n",
       "      <td>93329.097958</td>\n",
       "      <td>1.027420e+08</td>\n",
       "      <td>2198.733603</td>\n",
       "      <td>305.498114</td>\n",
       "      <td>10136.170433</td>\n",
       "      <td>46.890656</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 mean                                     var                \\\n",
       "       calls_duration       mb_used   messages calls_duration       mb_used   \n",
       "tariff                                                                        \n",
       "smart      409.740610  16281.200619  33.762704   37942.097585  3.539799e+07   \n",
       "ultra      542.892744  19480.901157  49.033649   93329.097958  1.027420e+08   \n",
       "\n",
       "                               std                           \n",
       "           messages calls_duration       mb_used   messages  \n",
       "tariff                                                       \n",
       "smart    863.608122     194.787314   5949.620693  29.387210  \n",
       "ultra   2198.733603     305.498114  10136.170433  46.890656  "
      ]
     },
     "execution_count": 314,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Посчитаем среднее количество, дисперсию и стандартное отклонение для значений столбцов calls_duration, messages, mb_used\n",
    "df.pivot_table(index='tariff', values=['calls_duration','messages', 'mb_used'], aggfunc=[np.mean, np.var, np.std])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 315,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Сохраним в переменной columns_data значения столбцов calls_duration messages mb_used\n",
    "columns_data = ['calls_duration','messages', 'mb_used'] "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 316,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Построим гистограммы плотности распределения вероятности\n",
    "def graph_maker (column):\n",
    "    ultra=df.query('tariff==\"ultra\"')\n",
    "    sns.distplot(ultra[column], bins=12)\n",
    "    smart=df.query('tariff==\"smart\"')\n",
    "    sns.distplot(smart[column], bins=12, color=\"orange\")\n",
    "    plt.show()\n",
    "    sns.boxplot(data=df, x=column, y='tariff')\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 317,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "calls_duration\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "messages\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mb_used\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "for column in columns_data:\n",
    "    print(column)\n",
    "    graph_maker(column)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Вывод"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " Проанализировав гистограммы можно сделать вывод о том что кривые распределений не являются непрерывными, а распределние вероятностей в свою очередь, не является нормальным.\n",
    "\n",
    " Проанализировав весь массив полученных данных можно сделать вывод о том что в во всех категориях, звонки, сообщения, интернет - тариф ultra обеспечивает более высокую прибыль и потребление услуг, чем тариф smart. В абсолютных же цифрах при выборке в 500 человек, наблюдается почти двукратное количественное преобладание пользователей тарифа smart, что может говорить о его популярности и распространенности, можно предположить что из-за доступности данного тарифного плана."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Шаг 4. Проверим гипотезы"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Проверим гипотизу о том что средняя выручка пользователей тарифов «Ультра» и «Смарт» различается"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Используем в качестве нулевой - гипотезу о равестве средних значений выручки по двум выборкам для тарифов ультра и смарт соответсвенно.\n",
    "Альтернативной гипотезой будем считать утверждение о том что средняя выручка пользователей тарифов «Ультра» и «Смарт» различается."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 318,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Сформируем срезы данных в зависимости от используемого тарифного плана, с помощью метода query\n",
    "df_smart = df.query('tariff == \"smart\"')\n",
    "df_ultra = df.query('tariff == \"ultra\"')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 319,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "651283"
      ]
     },
     "execution_count": 319,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Подсчитаем дисперсию для выручки\n",
    "df['month_payment'].var(ddof=1).astype('int')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 320,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "673075"
      ]
     },
     "execution_count": 320,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Отдельно посчитаем дисперсию для тарифа smart\n",
    "df_smart['month_payment'].var(ddof=1).astype('int')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 321,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "135513"
      ]
     },
     "execution_count": 321,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Посчитаем дисперсию для тарифа ultra\n",
    "df_ultra['month_payment'].var(ddof=1).astype('int')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Принимая во внимания что простого сравнения значений дисперсий, для определения их равенства недостаточно. Вычислим с какой вероятностью мы принимем неверное решение о равенстве или неравенстве дисперсий, для этого вычислим p-value. p-value представляет собой вероятность ошибки первого рода, а именно вероятность того, что нулевая гипотеза будет отвергнута при условии, что она верна"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 323,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Зададим критический уровень статистической зависмости в 1%\n",
    "alpha = .01"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 324,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Для проверки гипотезы о нормальности распределения используем количественный тест Шапиро-Уилка\n",
    "shapiro_stat_1, shapiro_p_1 = st.shapiro(df_smart['month_payment'])\n",
    "shapiro_stat_2, shapiro_p_2 = st.shapiro(df_ultra['month_payment'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 325,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "8.407790785948902e-45\n",
      "0.0\n",
      "Гипотеза о нормальности распределения отвергается\n"
     ]
    }
   ],
   "source": [
    "# Если подтвердится гепотеза о том что распределение среди имеющихся значений нормльно продолжим исследовние с применением теста Левена\n",
    "# Но в случае если подтвердится тот факт, что распрделение данных далеко от нормальных, то воспользуемся непараметрическим тестом  \n",
    "# Манна-Уитни для проверки равенства средних.\n",
    "print(shapiro_p_1)\n",
    "print(shapiro_p_2)\n",
    "if shapiro_p_1 < alpha and shapiro_p_2 < alpha:\n",
    "    print('Гипотеза о нормальности распределения отвергается') \n",
    "if shapiro_p_1 >= alpha and shapiro_p_2 >= alpha:\n",
    "    print(\"Не получилось отвергнуть нулевую гипотезу\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 326,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "p-value: 0.0000000000\n",
      "Отвергаем нулевую гипотезу\n"
     ]
    }
   ],
   "source": [
    "# Так как гипотеза о нормальности распределения отвергнута напишем функцию проверяющую равенство средних с помощью теста Манна-Уитни\n",
    "u_alpha = .01\n",
    "u_results = st.mannwhitneyu(df_smart['month_payment'], \n",
    "                            df_ultra['month_payment'], \n",
    "                            alternative='two-sided')\n",
    "print('p-value: {:.10f}'.format(u_results.pvalue))\n",
    "if u_results.pvalue < u_alpha:\n",
    "    print(\"Отвергаем нулевую гипотезу\")\n",
    "else:\n",
    "    print(\"Не получилось отвергнуть нулевую гипотезу\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Вывод"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Получившийся нулевой результат занчения p-value позволяет нам с уверенностью говорить о том что на любом разумном уровне значимости нулевая гипотеза, подразумевающая под собой равенство средних значений выручки для тарифов ультра и смарт, отвергается.\n",
    "Соответственно полученные результаты подтверждают правильность альтернативной гипотезы о том что средняя выручка пользователей тарифов «Ультра» и «Смарт» различается."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Проверим гипотезу: средняя выручка пользователей из Москвы отличается от выручки пользователей из других регионов"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Используем в качестве нулевой - гипотезу о равестве средних значений выручки пользователей из Москвы и из других регионов.\n",
    "Альтернативной гипотезой будем считать утверждение о том что средняя выручка пользователей из Москвы отличается от выручки пользователей из других регионов."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 327,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Отберем из нашего дотосета, только данные о пользователях тарифного плана из Москвы и сохраним в перменной city_moscow\n",
    "city_moscow = df.query('city == \"Москва\"')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 328,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Отберем из нашего дотосета, только данные о пользователях тарифного плана из любого другого города кроме Москвы и сохраним \n",
    "# в перменной city_other\n",
    "city_other = df.query('city != \"Москва\"')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 329,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Для проверки гипотезы о нормальности распределения используем количественный тест Шапиро-Уилка\n",
    "shapiro_stat_1, shapiro_e_1 = st.shapiro(city_moscow['month_payment'])\n",
    "shapiro_stat_2, shapiro_e_2 = st.shapiro(city_other['month_payment'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 330,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4.477874391396192e-20\n",
      "1.714502684086057e-40\n",
      "Гипотеза о нормальности распределения отвергается\n"
     ]
    }
   ],
   "source": [
    "# Если подтвердится гепотеза о том что распределение среди имеющихся значений нормльно продолжим исследовние с применением теста Левена\n",
    "# Но в случае если подтвердится тот факт, что распрделение данных далеко от нормальных, то воспользуемся непараметрическим тестом  \n",
    "# Манна-Уитни для проверки равенства средних.\n",
    "print(shapiro_e_1)\n",
    "print(shapiro_e_2)\n",
    "if shapiro_e_1 < alpha and shapiro_e_2 < alpha:\n",
    "    print('Гипотеза о нормальности распределения отвергается') \n",
    "if shapiro_e_1 >= alpha and shapiro_e_2 >= alpha:\n",
    "    print(\"Не получилось отвергнуть нулевую гипотезу\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 331,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "p-value: 0.1998248760\n",
      "Не получилось отвергнуть нулевую гипотезу\n"
     ]
    }
   ],
   "source": [
    "# Так как гипотеза о нормальности распределения отвергнута напишем функцию проверяющую равенство средних с помощью теста Манна-Уитни\n",
    "u_alpha = .01\n",
    "u_results = st.mannwhitneyu(city_moscow['month_payment'], \n",
    "                            city_other['month_payment'], \n",
    "                            alternative='two-sided')\n",
    "print('p-value: {:.10f}'.format(u_results.pvalue))\n",
    "if u_results.pvalue < u_alpha:\n",
    "    print(\"Отвергаем нулевую гипотезу\")\n",
    "else:\n",
    "    print(\"Не получилось отвергнуть нулевую гипотезу\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Шаг 5. Общий вывод"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "На основании всего объема полученных и проанализированных данных можно сделать следующие выводы:\n",
    "- Тариф ультра показывет значаительно более высокую доходность, а так же обеспечивает больший объем потребления для всего спектра предлагаемых заказчиком услуг, по сравнению с тарифом smart. \n",
    "\n",
    "- Тариф smart в рамках текущей выборки имеет почти двукратное количественное преобладание пользователей, что харакатерно для доступных продуктов ориентированных на наиболее массовый сегмент. \n",
    "\n",
    "- Полученые результаты дают понять, что низкоценовой сегмент тарифных планов, для операторов сотовой связи, является наиболее конкурентым, ввиду чего он же и являеся наименее маржинальным.\n",
    "\n",
    "- Резюмируя итоги проведенного исследования можно порекомендовать заказчику сделать упор на продвижение тарифа ultra. "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
